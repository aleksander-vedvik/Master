// Code generated by protoc-gen-gorums. DO NOT EDIT.
// versions:
// 	protoc-gen-gorums v0.7.0-devel
// 	protoc            v3.12.4
// source: node.proto

package __

import (
	context "context"
	fmt "fmt"
	gorums "github.com/relab/gorums"
	encoding "google.golang.org/grpc/encoding"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = gorums.EnforceVersion(7 - gorums.MinVersion)
	// Verify that the gorums runtime is sufficiently up-to-date.
	_ = gorums.EnforceVersion(gorums.MaxVersion - 7)
)

// A Configuration represents a static set of nodes on which quorum remote
// procedure calls may be invoked.
type Configuration struct {
	gorums.RawConfiguration
	nodes []*Node
	qspec QuorumSpec
	sender string
	round *uint64
}

// ConfigurationFromRaw returns a new Configuration from the given raw configuration and QuorumSpec.
//
// This function may for example be used to "clone" a configuration but install a different QuorumSpec:
//
//	cfg1, err := mgr.NewConfiguration(qspec1, opts...)
//	cfg2 := ConfigurationFromRaw(cfg1.RawConfig, qspec2)
func ConfigurationFromRaw(rawCfg gorums.RawConfiguration, qspec QuorumSpec) *Configuration {
	// return an error if the QuorumSpec interface is not empty and no implementation was provided.
	var test interface{} = struct{}{}
	if _, empty := test.(QuorumSpec); !empty && qspec == nil {
		panic("QuorumSpec may not be nil")
	}
	return &Configuration{
		RawConfiguration: rawCfg,
		qspec:            qspec,
	}
}

func (c *Configuration) AddSender(addr string) {
	c.sender = addr
}

// Nodes returns a slice of each available node. IDs are returned in the same
// order as they were provided in the creation of the Manager.
//
// NOTE: mutating the returned slice is not supported.
func (c *Configuration) Nodes() []*Node {
	if c.nodes == nil {
		c.nodes = make([]*Node, 0, c.Size())
		for _, n := range c.RawConfiguration {
			c.nodes = append(c.nodes, &Node{n})
		}
	}
	return c.nodes
}

// And returns a NodeListOption that can be used to create a new configuration combining c and d.
func (c Configuration) And(d *Configuration) gorums.NodeListOption {
	return c.RawConfiguration.And(d.RawConfiguration)
}

// Except returns a NodeListOption that can be used to create a new configuration
// from c without the nodes in rm.
func (c Configuration) Except(rm *Configuration) gorums.NodeListOption {
	return c.RawConfiguration.Except(rm.RawConfiguration)
}

func init() {
	if encoding.GetCodec(gorums.ContentSubtype) == nil {
		encoding.RegisterCodec(gorums.NewCodec())
	}
}

// Manager maintains a connection pool of nodes on
// which quorum calls can be performed.
type Manager struct {
	*gorums.RawManager
}

// NewManager returns a new Manager for managing connection to nodes added
// to the manager. This function accepts manager options used to configure
// various aspects of the manager.
func NewManager(opts ...gorums.ManagerOption) (mgr *Manager) {
	mgr = &Manager{}
	mgr.RawManager = gorums.NewRawManager(opts...)
	return mgr
}

// NewConfiguration returns a configuration based on the provided list of nodes (required)
// and an optional quorum specification. The QuorumSpec is necessary for call types that
// must process replies. For configurations only used for unicast or multicast call types,
// a QuorumSpec is not needed. The QuorumSpec interface is also a ConfigOption.
// Nodes can be supplied using WithNodeMap or WithNodeList, or WithNodeIDs.
// A new configuration can also be created from an existing configuration,
// using the And, WithNewNodes, Except, and WithoutNodes methods.
func (m *Manager) NewConfiguration(opts ...gorums.ConfigOption) (c *Configuration, err error) {
	if len(opts) < 1 || len(opts) > 2 {
		return nil, fmt.Errorf("wrong number of options: %d", len(opts))
	}
	c = &Configuration{
		round: new(uint64),
	}
	for _, opt := range opts {
		switch v := opt.(type) {
		case gorums.NodeListOption:
			c.RawConfiguration, err = gorums.NewRawConfiguration(m.RawManager, v)
			if err != nil {
				return nil, err
			}
		case QuorumSpec:
			// Must be last since v may match QuorumSpec if it is interface{}
			c.qspec = v
		default:
			return nil, fmt.Errorf("unknown option type: %v", v)
		}
	}
	// return an error if the QuorumSpec interface is not empty and no implementation was provided.
	var test interface{} = struct{}{}
	if _, empty := test.(QuorumSpec); !empty && c.qspec == nil {
		return nil, fmt.Errorf("missing required QuorumSpec")
	}
	return c, nil
}

// Nodes returns a slice of available nodes on this manager.
// IDs are returned in the order they were added at creation of the manager.
func (m *Manager) Nodes() []*Node {
	gorumsNodes := m.RawManager.Nodes()
	nodes := make([]*Node, 0, len(gorumsNodes))
	for _, n := range gorumsNodes {
		nodes = append(nodes, &Node{n})
	}
	return nodes
}

// Node encapsulates the state of a node on which a remote procedure call
// can be performed.
type Node struct {
	*gorums.RawNode
}

// QuorumSpec is the interface of quorum functions for PBFTNode.
type QuorumSpec interface {
	gorums.ConfigOption

	// PrePrepareQF is the quorum function for the PrePrepare
	// quorum call method. The in parameter is the request object
	// supplied to the PrePrepare method at call time, and may or may not
	// be used by the quorum function. If the in parameter is not needed
	// you should implement your quorum function with '_ *PrePrepareRequest'.
	PrePrepareQF(in *PrePrepareRequest, replies map[uint32]*Empty) (*Empty, bool)

	// PrepareQF is the quorum function for the Prepare
	// quorum call method. The in parameter is the request object
	// supplied to the Prepare method at call time, and may or may not
	// be used by the quorum function. If the in parameter is not needed
	// you should implement your quorum function with '_ *PrepareRequest'.
	PrepareQF(in *PrepareRequest, replies map[uint32]*Empty) (*Empty, bool)

	// CommitQF is the quorum function for the Commit
	// quorum call method. The in parameter is the request object
	// supplied to the Commit method at call time, and may or may not
	// be used by the quorum function. If the in parameter is not needed
	// you should implement your quorum function with '_ *CommitRequest'.
	CommitQF(in *CommitRequest, replies map[uint32]*Empty) (*Empty, bool)
}

// PrePrepare is a quorum call invoked on all nodes in configuration c,
// with the same argument in, and returns a combined result.
func (c *Configuration) PrePrepare(ctx context.Context, in *PrePrepareRequest) (resp *Empty, err error) {
	cd := gorums.QuorumCallData{
		Message: in,
		Method:  "protos.PBFTNode.PrePrepare",
		Sender:  c.sender,
		Round: *c.round,
	}
	cd.QuorumFunction = func(req protoreflect.ProtoMessage, replies map[uint32]protoreflect.ProtoMessage) (protoreflect.ProtoMessage, bool) {
		r := make(map[uint32]*Empty, len(replies))
		for k, v := range replies {
			r[k] = v.(*Empty)
		}
		return c.qspec.PrePrepareQF(req.(*PrePrepareRequest), r)
	}

	res, err := c.RawConfiguration.QuorumCall(ctx, cd)
	if err != nil {
		return nil, err
	}
	return res.(*Empty), err
}

// Prepare is a quorum call invoked on all nodes in configuration c,
// with the same argument in, and returns a combined result.
func (c *Configuration) Prepare(ctx context.Context, in *PrepareRequest) (resp *Empty, err error) {
	cd := gorums.QuorumCallData{
		Message: in,
		Method:  "protos.PBFTNode.Prepare",
		Sender:  c.sender,
	}
	cd.QuorumFunction = func(req protoreflect.ProtoMessage, replies map[uint32]protoreflect.ProtoMessage) (protoreflect.ProtoMessage, bool) {
		r := make(map[uint32]*Empty, len(replies))
		for k, v := range replies {
			r[k] = v.(*Empty)
		}
		return c.qspec.PrepareQF(req.(*PrepareRequest), r)
	}

	res, err := c.RawConfiguration.QuorumCall(ctx, cd)
	if err != nil {
		return nil, err
	}
	return res.(*Empty), err
}

// Commit is a quorum call invoked on all nodes in configuration c,
// with the same argument in, and returns a combined result.
func (c *Configuration) Commit(ctx context.Context, in *CommitRequest) (resp *Empty, err error) {
	cd := gorums.QuorumCallData{
		Message: in,
		Method:  "protos.PBFTNode.Commit",
		Sender:  c.sender,
	}
	cd.QuorumFunction = func(req protoreflect.ProtoMessage, replies map[uint32]protoreflect.ProtoMessage) (protoreflect.ProtoMessage, bool) {
		r := make(map[uint32]*Empty, len(replies))
		for k, v := range replies {
			r[k] = v.(*Empty)
		}
		return c.qspec.CommitQF(req.(*CommitRequest), r)
	}

	res, err := c.RawConfiguration.QuorumCall(ctx, cd)
	if err != nil {
		return nil, err
	}
	return res.(*Empty), err
}

// PBFTNode is the server-side API for the PBFTNode Service
type PBFTNode interface {
	PrePrepare(ctx gorums.ServerCtx, request *PrePrepareRequest, broadcast func(*PrepareRequest)) (response *Empty, err error)
	//PrePrepare(ctx gorums.ServerCtx, request *PrePrepareRequest) (response *Empty, err error, broadcast bool)
	Prepare(ctx gorums.ServerCtx, request *PrepareRequest, broadcast func(*CommitRequest)) (response *Empty, err error)
	//Prepare(ctx gorums.ServerCtx, request *PrepareRequest) (response *Empty, err error, broadcast bool)
	Commit(ctx gorums.ServerCtx, request *CommitRequest, returnToClient func(*Empty)) (response *Empty, err error)
	//Commit(ctx gorums.ServerCtx, request *CommitRequest) (response *Empty, err error)
	//ConvertPrePrepareToPrepareRequest(ctx context.Context, request *PrePrepareRequest) *PrepareRequest
	//ConvertPrepareToCommitRequest(ctx context.Context, request *PrepareRequest) *CommitRequest
}

// BELOW MUST BE GENERATED
type Server struct {
	*gorums.Server
}

func NewServer() *Server {
	return &Server{
		gorums.NewServer(),
	}
}

func RegisterPBFTNodeServer(srv *Server, impl PBFTNode) {
	srv.RegisterHandler("protos.PBFTNode.PrePrepare", gorums.BroadcastHandler2(impl.PrePrepare, srv.Server))
	//srv.RegisterHandler("protos.PBFTNode.PrePrepare", gorums.BroadcastHandler(impl.PrePrepare, srv.Server))
	srv.RegisterHandler("protos.PBFTNode.Prepare", gorums.BroadcastHandler2(impl.Prepare, srv.Server))
	//srv.RegisterHandler("protos.PBFTNode.Prepare", gorums.BroadcastHandler(impl.Prepare, srv.Server))
	srv.RegisterHandler("protos.PBFTNode.Commit", gorums.ReturnToClientHandler(impl.Commit, srv.Server))
	//srv.RegisterHandler("protos.PBFTNode.Commit", gorums.DefaultHandler(impl.Commit))

	//srv.RegisterConversion("protos.PBFTNode.PrePrepare", gorums.RegisterConversionFunc(impl.ConvertPrePrepareToPrepareRequest))
	//srv.RegisterConversion("protos.PBFTNode.Prepare", gorums.RegisterConversionFunc(impl.ConvertPrepareToCommitRequest))
}

func (srv *Server) RegisterConfiguration(c *Configuration) {
 	c.round = srv.Round
	srv.RegisterBroadcastFunc("protos.PBFTNode.PrePrepare", gorums.RegisterBroadcastFunc(c.Prepare))
	srv.RegisterBroadcastFunc("protos.PBFTNode.Prepare", gorums.RegisterBroadcastFunc(c.Commit))
	srv.ListenForBroadcast()
}

/*func (srv *Server) run() {
	for msg := range srv.BroadcastChan {
		srv.c.round = msg.GetRound()
		//srv.c.StoreID(msgID-1)
		req := msg.GetRequest()
		method := msg.GetMethod()
		ctx := context.Background()
		// if another function is called in broadcast, the request needs to be converted
		if convertFunc, ok := srv.conversions[method]; ok {
			convertedReq := convertFunc(ctx, req)
			srv.methods[method](ctx, convertedReq)
			continue
		}
		srv.methods[method](ctx, req)
	}
}

/*const (
	prefix string = "protos.QCStorage."
	PrePrepare 	string 	= "PrePrepare"
	Prepare 	string 	= "Prepare"
	Commit 		string 	= "Commit"
)

type Mapping struct {
	PrePrepare 	string	`method:"PrePrepare"`
	Prepare 	string	`method:"Prepare"`
	Commit 		string	`method:"Commit"`
}

func Map(source string, target string) func(*Mapping) {
	return func(m *Mapping) {
		s := reflect.ValueOf(m).Elem()
		if s.Kind() != reflect.Struct {
			panic("mapping must be a struct")
		}
		field := s.FieldByName(source)
		if field.IsValid() && field.CanSet() && field.Kind() == reflect.String {
			field.SetString(target)
		}
	}
}

func (srv *Server) CreateMapping(mappings... func(*Mapping)) {
	m := defaultMapping()
	for _, mapping := range mappings {
		mapping(m)
	}
}

func defaultMapping() *Mapping {
	m := Mapping{}
	gorums.SetDefaultValues(&m, prefix)
	return &m
}

func (srv *Server) setMapping(mapping *Mapping) {
	// must create copy to not overwrite subsequent fields
	m := *mapping
	v := reflect.ValueOf(m)
	t := reflect.TypeOf(m)
	for i := 0; i < t.NumField(); i++ {
		field := t.Field(i)
		name := field.Name
		value := v.Field(i).Interface().(string)
		method := reflect.ValueOf(srv.c).MethodByName(value).Interface().(gorums.BroadcastFunc)
		srv.methods[prefix + name] = gorums.RegisterBroadcastFunc(method)
	}
}*/
// ABOVE MUST BE GENERATED

type internalEmpty struct {
	nid   uint32
	reply *Empty
	err   error
}
