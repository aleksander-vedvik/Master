// Code generated by protoc-gen-gorums. DO NOT EDIT.
// versions:
// 	protoc-gen-gorums v0.7.0-devel
// 	protoc            v3.12.4
// source: storage.proto

package __

import (
	context "context"
	fmt "fmt"
	uuid "github.com/google/uuid"
	gorums "github.com/relab/gorums"
	encoding "google.golang.org/grpc/encoding"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	sync "sync"
	net "net"
	grpc "google.golang.org/grpc"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = gorums.EnforceVersion(7 - gorums.MinVersion)
	// Verify that the gorums runtime is sufficiently up-to-date.
	_ = gorums.EnforceVersion(gorums.MaxVersion - 7)
)

// A Configuration represents a static set of nodes on which quorum remote
// procedure calls may be invoked.
type Configuration struct {
	gorums.RawConfiguration
	nodes []*Node
	qspec QuorumSpec
	srv *tmpServerImpl
}

// ConfigurationFromRaw returns a new Configuration from the given raw configuration and QuorumSpec.
//
// This function may for example be used to "clone" a configuration but install a different QuorumSpec:
//
//	cfg1, err := mgr.NewConfiguration(qspec1, opts...)
//	cfg2 := ConfigurationFromRaw(cfg1.RawConfig, qspec2)
func ConfigurationFromRaw(rawCfg gorums.RawConfiguration, qspec QuorumSpec) *Configuration {
	// return an error if the QuorumSpec interface is not empty and no implementation was provided.
	var test interface{} = struct{}{}
	if _, empty := test.(QuorumSpec); !empty && qspec == nil {
		panic("QuorumSpec may not be nil")
	}
	return &Configuration{
		RawConfiguration: rawCfg,
		qspec:            qspec,
	}
}

// Nodes returns a slice of each available node. IDs are returned in the same
// order as they were provided in the creation of the Manager.
//
// NOTE: mutating the returned slice is not supported.
func (c *Configuration) Nodes() []*Node {
	if c.nodes == nil {
		c.nodes = make([]*Node, 0, c.Size())
		for _, n := range c.RawConfiguration {
			c.nodes = append(c.nodes, &Node{n})
		}
	}
	return c.nodes
}

// And returns a NodeListOption that can be used to create a new configuration combining c and d.
func (c Configuration) And(d *Configuration) gorums.NodeListOption {
	return c.RawConfiguration.And(d.RawConfiguration)
}

// Except returns a NodeListOption that can be used to create a new configuration
// from c without the nodes in rm.
func (c Configuration) Except(rm *Configuration) gorums.NodeListOption {
	return c.RawConfiguration.Except(rm.RawConfiguration)
}

func init() {
	if encoding.GetCodec(gorums.ContentSubtype) == nil {
		encoding.RegisterCodec(gorums.NewCodec())
	}
}

// Manager maintains a connection pool of nodes on
// which quorum calls can be performed.
type Manager struct {
	*gorums.RawManager
}

// NewManager returns a new Manager for managing connection to nodes added
// to the manager. This function accepts manager options used to configure
// various aspects of the manager.
func NewManager(opts ...gorums.ManagerOption) (mgr *Manager) {
	mgr = &Manager{}
	mgr.RawManager = gorums.NewRawManager(opts...)
	return mgr
}

// NewConfiguration returns a configuration based on the provided list of nodes (required)
// and an optional quorum specification. The QuorumSpec is necessary for call types that
// must process replies. For configurations only used for unicast or multicast call types,
// a QuorumSpec is not needed. The QuorumSpec interface is also a ConfigOption.
// Nodes can be supplied using WithNodeMap or WithNodeList, or WithNodeIDs.
// A new configuration can also be created from an existing configuration,
// using the And, WithNewNodes, Except, and WithoutNodes methods.
func (m *Manager) NewConfiguration(opts ...gorums.ConfigOption) (c *Configuration, err error) {
	if len(opts) < 1 || len(opts) > 2 {
		return nil, fmt.Errorf("wrong number of options: %d", len(opts))
	}
	c = &Configuration{}
	for _, opt := range opts {
		switch v := opt.(type) {
		case gorums.NodeListOption:
			c.RawConfiguration, err = gorums.NewRawConfiguration(m.RawManager, v)
			if err != nil {
				return nil, err
			}
		case QuorumSpec:
			// Must be last since v may match QuorumSpec if it is interface{}
			c.qspec = v
		default:
			return nil, fmt.Errorf("unknown option type: %v", v)
		}
	}
	// return an error if the QuorumSpec interface is not empty and no implementation was provided.
	var test interface{} = struct{}{}
	if _, empty := test.(QuorumSpec); !empty && c.qspec == nil {
		return nil, fmt.Errorf("missing required QuorumSpec")
	}
	return c, nil
}

// Nodes returns a slice of available nodes on this manager.
// IDs are returned in the order they were added at creation of the manager.
func (m *Manager) Nodes() []*Node {
	gorumsNodes := m.RawManager.Nodes()
	nodes := make([]*Node, 0, len(gorumsNodes))
	for _, n := range gorumsNodes {
		nodes = append(nodes, &Node{n})
	}
	return nodes
}

// Node encapsulates the state of a node on which a remote procedure call
// can be performed.
type Node struct {
	*gorums.RawNode
}

type Server struct {
	*gorums.Server
}

func NewServer() *Server {
	srv := &Server{
		gorums.NewServer(),
	}
	bd := &broadcastData{
		data: gorums.BroadcastOptions{},
	}
	b := &Broadcast{
		BroadcastStruct: gorums.NewBroadcastStruct(),
		sp:              gorums.NewSpBroadcastStruct(),
		bd:              bd,
	}
	bd.b = b
	srv.RegisterBroadcastStruct(b, assign(b), assignValues(b))
	return srv
}

func (srv *Server) SetView(ownAddr string, srvAddrs []string, opts ...gorums.ManagerOption) error {
	err := srv.RegisterView(ownAddr, srvAddrs, opts...)
	srv.ListenForBroadcast()
	return err
}

type Broadcast struct {
	*gorums.BroadcastStruct
	sp       *gorums.SpBroadcast
	metadata gorums.BroadcastMetadata
	bd       *broadcastData
}

type broadcastData struct {
	mu   sync.Mutex
	data gorums.BroadcastOptions
	b    *Broadcast
}

func assign(b *Broadcast) func(bh gorums.BroadcastHandlerFunc, ch gorums.BroadcastReturnToClientHandlerFunc) {
	return func(bh gorums.BroadcastHandlerFunc, ch gorums.BroadcastReturnToClientHandlerFunc) {
		b.sp.BroadcastHandler = bh
		b.sp.ReturnToClientHandler = ch
	}
}

func assignValues(b *Broadcast) func(metadata gorums.BroadcastMetadata) {
	return func(metadata gorums.BroadcastMetadata) {
		b.metadata = metadata
	}
}

func (b *Broadcast) GetMetadata() gorums.BroadcastMetadata {
	return b.metadata
}

func (b *Broadcast) Opts() *broadcastData {
	b.bd.mu.Lock()
	b.bd.data = gorums.BroadcastOptions{}
	return b.bd
}

func (b *broadcastData) To(srvAddrs ...string) *broadcastData {
	b.data.ServerAddresses = append(b.data.ServerAddresses, srvAddrs...)
	return b
}

func (b *broadcastData) OmitUniquenessChecks() *broadcastData {
	return b
}

func (b *broadcastData) SkipSelf() *broadcastData {
	return b
}

func (b *broadcastData) Gossip(percentage float32) *broadcastData {
	return b
}

func (b *Broadcast) Broadcast(req *State) {
	b.sp.BroadcastHandler("protos.UniformBroadcast.Broadcast", req, b.metadata)
}

func (bd *broadcastData) Broadcast(req *State) {
	data := bd.data
	bd.mu.Unlock()
	bd.b.sp.BroadcastHandler("protos.UniformBroadcast.Broadcast", req, bd.b.metadata, data)
}

func (b *Broadcast) Deliver(req *State) {
	b.sp.BroadcastHandler("protos.UniformBroadcast.Deliver", req, b.metadata)
}

func (bd *broadcastData) Deliver(req *State) {
	data := bd.data
	bd.mu.Unlock()
	bd.b.sp.BroadcastHandler("protos.UniformBroadcast.Deliver", req, bd.b.metadata, data)
}

// QuorumSpec is the interface of quorum functions for UniformBroadcast.
type QuorumSpec interface {
	gorums.ConfigOption

	// BroadcastQF is the quorum function for the Broadcast
	// quorum call method. The in parameter is the request object
	// supplied to the Broadcast method at call time, and may or may not
	// be used by the quorum function. If the in parameter is not needed
	// you should implement your quorum function with '_ *State'.
	BroadcastQF(in *State, replies map[uint32]*ClientResponse) (*ClientResponse, bool)
}

// Broadcast is a quorum call invoked on all nodes in configuration c,
// with the same argument in, and returns a combined result.
func (c *Configuration) Broadcast(ctx context.Context, in *State, criteria Criteria) (resp *ClientResponse, err error) {
	if c.srv == nil {
		return nil, fmt.Errorf("a client handler is not defined. Use configuration.RegisterClientHandler() to define a handler")
	}
	broadcastID := uuid.New().String()
	cd := gorums.QuorumCallData{
		Message: in,
		Method:  "protos.UniformBroadcast.Broadcast",

		BroadcastID: broadcastID,
		Sender:      "client",
	}
	cd.QuorumFunction = func(req protoreflect.ProtoMessage, replies map[uint32]protoreflect.ProtoMessage) (protoreflect.ProtoMessage, bool) {
		r := make(map[uint32]*ClientResponse, len(replies))
		for k, v := range replies {
			r[k] = v.(*ClientResponse)
		}
		return c.qspec.BroadcastQF(req.(*State), r)
	}

	res, err := c.RawConfiguration.QuorumCall(ctx, cd)
	if err != nil {
		return nil, err
	}
	c.srv.handleClient(AllQuorum, 3)
	return res.(*ClientResponse), err
}

func (srv tmpServerImpl) handleClient(returnWhen Criteria, numServers int) {
	limit := 0
	if returnWhen == ByzantineQuorum {
		limit = 1 + 2 * numServers / 3
	}
	if returnWhen == MajorityQuorum {
		limit = 1 + numServers / 2
	}
	if returnWhen == AllQuorum {
		limit = numServers
	}
	for resp := range srv.respChan {
		srv.resps = append(srv.resps, resp)
		if len(srv.resps) >= limit {
			break
		}
	}
	srv.handler(srv.resps)
	srv.grpcServer.GracefulStop()
}

type Criteria int

const (
	ByzantineQuorum Criteria = iota
	MajorityQuorum
	AllQuorum
)
type tmpServer interface {
	client(context.Context, *ClientResponse) (any, error)
}

type tmpServerImpl struct {
	grpcServer *grpc.Server
	handler func(resps []*ClientResponse)
	resps []*ClientResponse
	respChan chan *ClientResponse
}

func (srv tmpServerImpl) client(ctx context.Context, resp *ClientResponse) (any, error) {
	srv.respChan <- resp
	return nil, nil
}

func (c *Configuration) RegisterResponseHandler(addr string, handler func(resps []*ClientResponse)) {
	maxNumResponses := 3
	//c.clientHandler = handler
	var opts []grpc.ServerOption
	srv := tmpServerImpl{
		grpcServer: grpc.NewServer(opts...),
		respChan: make(chan *ClientResponse, maxNumResponses),
		resps: make([]*ClientResponse, 0, maxNumResponses),
		handler: handler,
	}
	lis, err := net.Listen("tcp", addr)
	for err != nil {
		return
	}
	srv.grpcServer.RegisterService(&TmpServer_ServiceDesc, srv)
	go srv.grpcServer.Serve(lis)
	c.srv = &srv
}

func _TmpServer_Client_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(tmpServer).client(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.TmpServer/Client",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(tmpServer).client(ctx, req.(*ClientResponse))
	}
	return interceptor(ctx, in, info, handler)
}

var TmpServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.TmpServer",
	HandlerType: (*tmpServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Client",
			Handler:    _TmpServer_Client_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "",
}

// UniformBroadcast is the server-side API for the UniformBroadcast Service
type UniformBroadcast interface {
	Broadcast(ctx gorums.ServerCtx, request *State, broadcast *Broadcast)
	Deliver(ctx gorums.ServerCtx, request *State, broadcast *Broadcast)
}

func (srv *Server) Broadcast(ctx gorums.ServerCtx, request *State, broadcast *Broadcast) {
	panic("Broadcast not implemented")
}
func (srv *Server) Deliver(ctx gorums.ServerCtx, request *State, broadcast *Broadcast) {
	panic("Deliver not implemented")
}

func RegisterUniformBroadcastServer(srv *Server, impl UniformBroadcast) {
	srv.RegisterHandler("protos.UniformBroadcast.Broadcast", gorums.BroadcastHandler(impl.Broadcast, srv.Server))
	srv.RegisterHandler("protos.UniformBroadcast.Deliver", gorums.BroadcastHandler(impl.Deliver, srv.Server))
}

func (b *Broadcast) Reply(resp protoreflect.ProtoMessage, err error) {
	b.sp.ReturnToClientHandler(resp, err, b.metadata)
}

func (srv *Server) ReplyToClient(resp protoreflect.ProtoMessage, err error, broadcastID string) {
	srv.RetToClient(resp, err, broadcastID)
}

func (b *Broadcast) SendToClient(resp protoreflect.ProtoMessage, err error) {
	b.sp.ReturnToClientHandler(resp, err, b.metadata)
}

func (srv *Server) SendToClient(resp protoreflect.ProtoMessage, err error, broadcastID string) {
	srv.RetToClient(resp, err, broadcastID)
}

type internalClientResponse struct {
	nid   uint32
	reply *ClientResponse
	err   error