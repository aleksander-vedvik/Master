// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: pbfts.proto

package pbftSProto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PBFTNodeClient is the client API for PBFTNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PBFTNodeClient interface {
	Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	PrePrepare(ctx context.Context, in *PrePrepareRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Prepare(ctx context.Context, in *PrepareRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ClientHandler(ctx context.Context, in *ClientResponse, opts ...grpc.CallOption) (*empty.Empty, error)
	Benchmark(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Result, error)
}

type pBFTNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewPBFTNodeClient(cc grpc.ClientConnInterface) PBFTNodeClient {
	return &pBFTNodeClient{cc}
}

func (c *pBFTNodeClient) Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/pbftSProto.PBFTNode/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pBFTNodeClient) PrePrepare(ctx context.Context, in *PrePrepareRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/pbftSProto.PBFTNode/PrePrepare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pBFTNodeClient) Prepare(ctx context.Context, in *PrepareRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/pbftSProto.PBFTNode/Prepare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pBFTNodeClient) Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/pbftSProto.PBFTNode/Commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pBFTNodeClient) ClientHandler(ctx context.Context, in *ClientResponse, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/pbftSProto.PBFTNode/ClientHandler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pBFTNodeClient) Benchmark(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/pbftSProto.PBFTNode/Benchmark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PBFTNodeServer is the server API for PBFTNode service.
// All implementations must embed UnimplementedPBFTNodeServer
// for forward compatibility
type PBFTNodeServer interface {
	Write(context.Context, *WriteRequest) (*empty.Empty, error)
	PrePrepare(context.Context, *PrePrepareRequest) (*empty.Empty, error)
	Prepare(context.Context, *PrepareRequest) (*empty.Empty, error)
	Commit(context.Context, *CommitRequest) (*empty.Empty, error)
	ClientHandler(context.Context, *ClientResponse) (*empty.Empty, error)
	Benchmark(context.Context, *empty.Empty) (*Result, error)
	mustEmbedUnimplementedPBFTNodeServer()
}

// UnimplementedPBFTNodeServer must be embedded to have forward compatible implementations.
type UnimplementedPBFTNodeServer struct {
}

func (UnimplementedPBFTNodeServer) Write(context.Context, *WriteRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedPBFTNodeServer) PrePrepare(context.Context, *PrePrepareRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrePrepare not implemented")
}
func (UnimplementedPBFTNodeServer) Prepare(context.Context, *PrepareRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prepare not implemented")
}
func (UnimplementedPBFTNodeServer) Commit(context.Context, *CommitRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedPBFTNodeServer) ClientHandler(context.Context, *ClientResponse) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientHandler not implemented")
}
func (UnimplementedPBFTNodeServer) Benchmark(context.Context, *empty.Empty) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Benchmark not implemented")
}
func (UnimplementedPBFTNodeServer) mustEmbedUnimplementedPBFTNodeServer() {}

// UnsafePBFTNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PBFTNodeServer will
// result in compilation errors.
type UnsafePBFTNodeServer interface {
	mustEmbedUnimplementedPBFTNodeServer()
}

func RegisterPBFTNodeServer(s grpc.ServiceRegistrar, srv PBFTNodeServer) {
	s.RegisterService(&PBFTNode_ServiceDesc, srv)
}

func _PBFTNode_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBFTNodeServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbftSProto.PBFTNode/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBFTNodeServer).Write(ctx, req.(*WriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PBFTNode_PrePrepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrePrepareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBFTNodeServer).PrePrepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbftSProto.PBFTNode/PrePrepare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBFTNodeServer).PrePrepare(ctx, req.(*PrePrepareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PBFTNode_Prepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBFTNodeServer).Prepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbftSProto.PBFTNode/Prepare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBFTNodeServer).Prepare(ctx, req.(*PrepareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PBFTNode_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBFTNodeServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbftSProto.PBFTNode/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBFTNodeServer).Commit(ctx, req.(*CommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PBFTNode_ClientHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBFTNodeServer).ClientHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbftSProto.PBFTNode/ClientHandler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBFTNodeServer).ClientHandler(ctx, req.(*ClientResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _PBFTNode_Benchmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBFTNodeServer).Benchmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbftSProto.PBFTNode/Benchmark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBFTNodeServer).Benchmark(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// PBFTNode_ServiceDesc is the grpc.ServiceDesc for PBFTNode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PBFTNode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pbftSProto.PBFTNode",
	HandlerType: (*PBFTNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Write",
			Handler:    _PBFTNode_Write_Handler,
		},
		{
			MethodName: "PrePrepare",
			Handler:    _PBFTNode_PrePrepare_Handler,
		},
		{
			MethodName: "Prepare",
			Handler:    _PBFTNode_Prepare_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _PBFTNode_Commit_Handler,
		},
		{
			MethodName: "ClientHandler",
			Handler:    _PBFTNode_ClientHandler_Handler,
		},
		{
			MethodName: "Benchmark",
			Handler:    _PBFTNode_Benchmark_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pbfts.proto",
}
